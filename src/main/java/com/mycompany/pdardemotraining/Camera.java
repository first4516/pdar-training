/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.pdardemotraining;

import com.github.sarxos.webcam.Webcam;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;

/**
 *
 * @author user
 */
public class Camera extends javax.swing.JDialog {

    private static JLabel jlabelStatus;
    private JPanel imagesPane;

    /**
     * Creates new form Camera
     */
    Image Image = null;

    public Camera(java.awt.Frame parent) {
        super(parent, true);
        initComponents();

        FunctionMain fm = new FunctionMain();
        fm.setDisplayConnect(jLabelStatus);
    }

    private Camera(JFrame jFrame, boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelPhoto = new javax.swing.JPanel();
        jLabelPhoto = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnOpenCamera = new javax.swing.JButton();
        btnDeletePhoto = new javax.swing.JButton();
        jPanelConfirm = new javax.swing.JPanel();
        jCheckBoxconfirm = new javax.swing.JCheckBox();
        jLabelStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(650, 550));

        jPanelPhoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanelPhotoLayout = new javax.swing.GroupLayout(jPanelPhoto);
        jPanelPhoto.setLayout(jPanelPhotoLayout);
        jPanelPhotoLayout.setHorizontalGroup(
            jPanelPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPhotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelPhotoLayout.setVerticalGroup(
            jPanelPhotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPhotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("TH SarabunPSK", 0, 20)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("กรุณาเปิดกล้องถ่ายรูปและเลือกรูปที่ชัดเจนที่สุด");

        btnOpenCamera.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        btnOpenCamera.setText("ถ่ายรูป");
        btnOpenCamera.setFocusable(false);
        btnOpenCamera.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenCameraMouseClicked(evt);
            }
        });

        btnDeletePhoto.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        btnDeletePhoto.setText("ลบ");
        btnDeletePhoto.setFocusable(false);
        btnDeletePhoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeletePhotoMouseClicked(evt);
            }
        });

        jPanelConfirm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jCheckBoxconfirm.setFont(new java.awt.Font("TH SarabunPSK", 1, 20)); // NOI18N
        jCheckBoxconfirm.setText("แสดงรูปถ่าย");
        jCheckBoxconfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxconfirmActionPerformed(evt);
            }
        });

        jLabelStatus.setBackground(new java.awt.Color(255, 255, 255));
        jLabelStatus.setFont(new java.awt.Font("TH SarabunPSK", 0, 18)); // NOI18N
        jLabelStatus.setText("......");

        javax.swing.GroupLayout jPanelConfirmLayout = new javax.swing.GroupLayout(jPanelConfirm);
        jPanelConfirm.setLayout(jPanelConfirmLayout);
        jPanelConfirmLayout.setHorizontalGroup(
            jPanelConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfirmLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxconfirm)
                .addContainerGap())
        );
        jPanelConfirmLayout.setVerticalGroup(
            jPanelConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelConfirmLayout.createSequentialGroup()
                .addGroup(jPanelConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxconfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnOpenCamera, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeletePhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanelConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDeletePhoto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelConfirm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnOpenCamera, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanelPhoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenCameraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenCameraMouseClicked
        if (evt.getClickCount() == 1) {
            FunctionMain.PersonImagePreviewClose();
            jCheckBoxconfirm.setSelected(false);

            List<Webcam> webcamlist = Webcam.getWebcams();
            if (webcamlist.isEmpty()) {
                JOptionPane.showMessageDialog(this, "ตรวจไม่พบอุปกรณ์กล้องถ่ายรูป");
            } else {
                JFrame frame = new JFrame();
                JDialog dialog = new JDialog(frame);//frame is owner
                JFrame in = (JFrame) (dialog.getParent());
                frame.removeAll();

                CaptureForm cf = new CaptureForm(in);
                cf.pack();
                cf.setLocationRelativeTo(null);
                cf.setVisible(true);
            }

            if (CaptureForm.imagesList.size() > 0) {
                jLabelPhoto.removeAll();
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(CaptureForm.imagesList.get(0)).getImage());
                jLabelPhoto.setIcon(imageIcon);
            }
        }
    }//GEN-LAST:event_btnOpenCameraMouseClicked

    private void jCheckBoxconfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxconfirmActionPerformed
        if (ScreenUtil.getNumberOfScreen() > 1) {
            FunctionMain.PersonImagePreviewClose();
            if (jCheckBoxconfirm.isSelected()) {
                if (CaptureForm.imagesList.size() >= 1) {
                    Image = CaptureForm.imagesList.get(0).getScaledInstance(320, 240, 320);
                    FunctionMain.PersonImagePreviewShow();
                    FunctionMain.setPersonImage(Image, jPanelPhoto);
                } else {
                    MessageBox.Info("กรุณาถ่ายรูปก่อนแสดงผลจอที่ 2");
                    jCheckBoxconfirm.setSelected(false);
                }

            } else {
                FunctionMain.PersonImagePreviewClose();
            }
        } else {
            MessageBox.Info("ไม่พบจอที่สองติดตั้ง ในรูปแบบ Extended");
            jCheckBoxconfirm.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBoxconfirmActionPerformed

    private void btnDeletePhotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeletePhotoMouseClicked
        CaptureForm.imagesList.remove(0);
        jLabelPhoto.setIcon(null);
        FunctionMain.PersonImagePreviewClose();
        jCheckBoxconfirm.setSelected(false);
    }//GEN-LAST:event_btnDeletePhotoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Camera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Camera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Camera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Camera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Camera dialog = new Camera(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public class WrapLayout extends FlowLayout {

        private Dimension preferredLayoutSize;

        /**
         * Constructs a new <code>WrapLayout</code> with a left alignment and a
         * default 5-unit horizontal and vertical gap.
         */
        public WrapLayout() {
            super();
        }

        /**
         * Constructs a new <code>FlowLayout</code> with the specified alignment
         * and a default 5-unit horizontal and vertical gap. The value of the
         * alignment argument must be one of <code>WrapLayout</code>,
         * <code>WrapLayout</code>, or <code>WrapLayout</code>.
         *
         * @param align the alignment value
         */
        public WrapLayout(int align) {
            super(align);
        }

        /**
         * Creates a new flow layout manager with the indicated alignment and
         * the indicated horizontal and vertical gaps.
         * <p>
         * The value of the alignment argument must be one of
         * <code>WrapLayout</code>, <code>WrapLayout</code>, or
         * <code>WrapLayout</code>.
         *
         * @param align the alignment value
         * @param hgap the horizontal gap between components
         * @param vgap the vertical gap between components
         */
        public WrapLayout(int align, int hgap, int vgap) {
            super(align, hgap, vgap);
        }

        /**
         * Returns the preferred dimensions for this layout given the
         * <i>visible</i> components in the specified target container.
         *
         * @param target the component which needs to be laid out
         * @return the preferred dimensions to lay out the subcomponents of the
         * specified container
         */
        @Override
        public Dimension preferredLayoutSize(Container target) {
            return layoutSize(target, true);
        }

        /**
         * Returns the minimum dimensions needed to layout the <i>visible</i>
         * components contained in the specified target container.
         *
         * @param target the component which needs to be laid out
         * @return the minimum dimensions to lay out the subcomponents of the
         * specified container
         */
        @Override
        public Dimension minimumLayoutSize(Container target) {
            Dimension minimum = layoutSize(target, false);
            minimum.width -= (getHgap() + 1);
            return minimum;
        }

        /**
         * Returns the minimum or preferred dimension needed to layout the
         * target container.
         *
         * @param target target to get layout size for
         * @param preferred should preferred size be calculated
         * @return the dimension to layout the target container
         */
        private Dimension layoutSize(Container target, boolean preferred) {
            synchronized (target.getTreeLock()) {
                //  Each row must fit with the width allocated to the containter.
                //  When the container width = 0, the preferred width of the container
                //  has not yet been calculated so lets ask for the maximum.

                int targetWidth = target.getSize().width;

                if (targetWidth == 0) {
                    targetWidth = Integer.MAX_VALUE;
                }

                int hgap = getHgap();
                int vgap = getVgap();
                Insets insets = target.getInsets();
                int horizontalInsetsAndGap = insets.left + insets.right + (hgap * 2);
                int maxWidth = targetWidth - horizontalInsetsAndGap;

                //  Fit components into the allowed width
                Dimension dim = new Dimension(0, 0);
                int rowWidth = 0;
                int rowHeight = 0;

                int nmembers = target.getComponentCount();

                for (int i = 0; i < nmembers; i++) {
                    Component m = target.getComponent(i);

                    if (m.isVisible()) {
                        Dimension d = preferred ? m.getPreferredSize() : m.getMinimumSize();

                        //  Can't add the component to current row. Start a new row.
                        if (rowWidth + d.width > maxWidth) {
                            addRow(dim, rowWidth, rowHeight);
                            rowWidth = 0;
                            rowHeight = 0;
                        }

                        //  Add a horizontal gap for all components after the first
                        if (rowWidth != 0) {
                            rowWidth += hgap;
                        }

                        rowWidth += d.width;
                        rowHeight = Math.max(rowHeight, d.height);
                    }
                }

                addRow(dim, rowWidth, rowHeight);

                dim.width += horizontalInsetsAndGap;
                dim.height += insets.top + insets.bottom + vgap * 2;

                //    When using a scroll pane or the DecoratedLookAndFeel we need to
                //  make sure the preferred size is less than the size of the
                //  target containter so shrinking the container size works
                //  correctly. Removing the horizontal gap is an easy way to do this.
                Container scrollPane = SwingUtilities.getAncestorOfClass(JScrollPane.class, target);

                if (scrollPane != null && target.isValid()) {
                    dim.width -= (hgap + 1);
                }

                return dim;
            }
        }

        /*
         *  A new row has been completed. Use the dimensions of this row
         *  to update the preferred size for the container.
         *
         *  @param dim update the width and height when appropriate
         *  @param rowWidth the width of the row to add
         *  @param rowHeight the height of the row to add
         */
        private void addRow(Dimension dim, int rowWidth, int rowHeight) {
            dim.width = Math.max(dim.width, rowWidth);

            if (dim.height > 0) {
                dim.height += getVgap();
            }

            dim.height += rowHeight;
        }
    }

    class ImageViewPanel extends JPanel {

        JLabel NO_IMAGES = new JLabel("ยังไม่ได้ถ่ายรูป");
        JLabel SELECT_PHOTO = new JLabel("คลิกเลือกรูปที่ต้องการและกดปุ่มบันทึก");

        ArrayList<BufferedImage> images;
        ArrayList<MyLabel> imageLabels;

        @Override
        public void setLayout(LayoutManager mgr) {
            super.setLayout(new WrapLayout()); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void setBackground(Color bg) {
            super.setBackground(Color.WHITE); //To change body of generated methods, choose Tools | Templates.
        }

        public ImageViewPanel(ArrayList<BufferedImage> images) {

            this.images = images;
            imageLabels = new ArrayList<>();
            int i = 0;
            for (BufferedImage bi : images) {
                imageLabels.add(new MyLabel(new ImageIcon(bi), this, i));
                i++;
            }
            i = 0;
            layoutLabels();

            getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0, true), "Delete pressed");
            getActionMap().put("Delete pressed", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    removeFocusedImageLabel();
                }
            });
        }

        void removeFocusedImageLabel() {
            if (focusedLabel == null) {
                return;
            }
            imageLabels.remove(focusedLabel);
            remove(focusedLabel);
            layoutLabels();
        }

        private void layoutLabels() {
            NO_IMAGES.setFont(new Font("TH SarabunPSK", 0, 18));
//            SELECT_PHOTO.setFont(new Font("TH SarabunPSK", 0, 18));

            if (imageLabels.isEmpty()) {
                add(NO_IMAGES);
            } else {
//                add(SELECT_PHOTO);
                remove(NO_IMAGES);
                for (JLabel il : imageLabels) {
                    add(il);
                }
            }
            revalidate();
            repaint();
        }
        private MyLabel focusedLabel;

        void setFocusedLabel(MyLabel labelToFocus) {
            if (focusedLabel != null) {
                focusedLabel.setBorder(null);
                focusedLabel.setClicked(false);
            }
            focusedLabel = labelToFocus;

            focusedLabel.setBorder(new LineBorder(Color.GREEN, 3));

//            selected_image = labelToFocus.identity_num;
        }
    }

    class MyLabel extends JLabel {

        private final ImageViewPanel imageViewPanel;
        public int identity_num;
        private boolean clicked = false;

        public MyLabel(Icon image, ImageViewPanel imageViewPanel, int num) {
            super(image);
            this.imageViewPanel = imageViewPanel;
            this.identity_num = num;
            initLabel();
        }

        public MyLabel(String text, ImageViewPanel imageViewPanel, int num) {
            super(text);
            this.imageViewPanel = imageViewPanel;
            this.identity_num = num;
            initLabel();
        }

        private void initLabel() {
            setFocusable(true);
            addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    super.mouseClicked(e);
                    clicked = true;
                    imageViewPanel.setFocusedLabel(MyLabel.this);

                }

                @Override
                public void mouseEntered(MouseEvent me) {
                    super.mouseEntered(me);
                    if (clicked) {
                        return;
                    }
                    setBorder(new LineBorder(Color.ORANGE, 3));
                    //call for focus mouse is over this component
                    requestFocusInWindow();
                }
            });

            addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent e) {
                    super.focusLost(e);

                    if (clicked) {
                        return;
                    }

                    setBorder(null);
                }
            });
        }

        public void setClicked(boolean clicked) {
            this.clicked = clicked;
        }

        public boolean isClicked() {
            return clicked;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeletePhoto;
    private javax.swing.JButton btnOpenCamera;
    private javax.swing.JCheckBox jCheckBoxconfirm;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelPhoto;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelConfirm;
    private javax.swing.JPanel jPanelPhoto;
    // End of variables declaration//GEN-END:variables
}
